@page "/conductores"
@inject HttpClient _http
@inject IJSRuntime _js

<div class= "main-container">
    <body onbeforeunload="DataTableRemove()">
        <div class="pricing-header px-1 py-3 pt-md-3 pb-md-4 mx-auto text-center">
            <h1 class="display-4 font-wight-bold font-color-gray">
                <strong>
                    Gestión de Conductores
                </strong>
            </h1>
        </div>
        <div>
            <a class="btn btn-primary" href="insertarConductor"> Insertar Conductor </a>
        </div>
        <br/>

        @if (conductores == null)
        {
            <text> Cargando.... </text>
        }
        else if (conductores.Length == 0)
        {
            <text> No hay conductores en el sistema </text>
        }
        else
        {
            <table id="datatable" class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th> Cedula </th>
                        <th> Nombre </th>
                        <th> Apellido Paterno </th>
                        <th> Apellido Materno </th>
                        <th> Licencia B </th>
                        <th> Fecha Vencimiento Licencia B </th>
                        <th> Licencia A </th>
                        <th> Fecha Vencimiento Licencia A </th>
                        <th> Estado </th>
                        <th> Fecha de contratacion </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var conduct in conductores)
                    {
                        <tr>
                            <td> @conduct.cedula </td>
                            <td> @conduct.nombre </td>
                            <td> @conduct.apellido1 </td>
                            <td> @conduct.apellido2 </td>
                            @if (conduct.licenciaB == 0)
                            {
                                <td>
                                    No aplica
                                </td>
                                <td>
                                    No aplica
                                </td>
                            }
                            else {
                            <td> @conduct.licenciaB </td>
                            <td> @conduct.fechaVencimientoB.ToString("dd/MM/yyyy") </td>
                            }

                            @if (conduct.licenciaA == 0)
                            {
                                <td>
                                    No aplica
                                </td>
                                <td>
                                    No aplica
                                </td>
                            }
                            else {
                            <td> @conduct.licenciaA </td>
                            <td> @conduct.fechaVencimientoA.ToString("dd/MM/yyyy") </td>
                            }

                            <td> @conduct.estado </td>
                            <td> @conduct.fechaDeContratacion.ToString("dd/MM/yyyy") </td>
                            <td>
                                <a class="btn btn-success" href="editarConductor/@conduct.cedula">Editar</a>
                                <button class="btn btn-danger" @onclick="(() => EliminarConductor(conduct.nombre,conduct.cedula)) "> Eliminar </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </body>
</div>

@code {
    /// <value>Set y get del array de Conductores.</value>
    public Conductor[] conductores { get; set; }
    /// <summary>
    /// Funcion que inicializa el componente y carga los conductores en la tabla.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await cargarConductores();
        await _js.InvokeAsync<object>("DataTableAdd");
    }
    /// <summary>
    /// Funcion que carga los conductores en el data table.
    /// </summary>
    async Task cargarConductores()
    {
        conductores = await _http.GetJsonAsync<Conductor[]>("Conductor");
    }
    /// <summary>
    /// Funcion que elimina un conductor de la tabla. Posteriormente, carga los conductores.
    /// </summary>
    /// <param name="name">Nombre del conductor.</param>
    /// <param name="cedul">Cedula del conductor.</param>
    /// <returns>Devuelve la tabla actualizada.</returns>
    async Task EliminarConductor(string name, string cedul)
    {
        await _http.DeleteAsync($"Conductor/{cedul}");
        await cargarConductores();
   }
}
