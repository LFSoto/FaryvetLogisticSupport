@page "/AgregarEntrega"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation


<body onbeforeunload="DataTableRemove()">
    <div class="pricing-header px-1 py-3 pt-md-3 pb-md-4 mx-auto text-center">
        <h1 class="display-4 font-wight-bold font-color-gray">
            <strong>
                Nueva Entrega
            </strong>
        </h1>
    </div>

    @if (facturas == null)
    {
        <text> Cargando... </text>
    }
    else if (facturas.Count == 0)
    {
        <text> No hay facturas </text>
    }
    else
    {
        <div class="container">
            <table id="datatable" class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <td> Id </td>
                        <td> Peso Total</td>
                        <td> Forma de Cobro</td>
                        <td> Moneda </td>
                        <td> Monto Total</td>
                        <td> Nombre del Cliente </td>
                        <td> Ubicación </td>
                        <td> Dirección </td>
                        <td> Agregar a Entrega</td>
                        <td> Estado </td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var factura in facturas)
                    {
                        <tr>
                            <td> @factura.id </td>
                            <td> @factura.pesoTotal Kg </td>
                            <td> @factura.formaCobro </td>
                            <td> @factura.moneda </td>
                            <td> @factura.montoTotal </td>
                            <td> @factura.nombreCliente </td>
                            <td> @factura.ubicacion @factura.DivisionGeograficaNavigation.ubicacion </td>
                            <td> @factura.direccion </td>
                            <td><input type="checkbox" @onclick="(() => agregarEntrega(factura.id))" /> </td>
                            <td> @factura.estado</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="container">
            <h5>
                Peso total: @entrega.peso KG
            </h5>
        </div>

        <div class="container">
            <h5>
                Monto total: @entrega.costo colones
            </h5>
        </div>

        <div class="container">
            <EditForm Model="@entrega" OnValidSubmit="@agregarEntregaBD">

                <div>
                    <a style="color:red">*</a>
                    <label> Seleccione un vehiculo: </label>
                    <InputSelect required @onfocusout="@filtrarConductores" @bind-Value="@entrega.vehiculo">
                        <option value="">Seleccione una opción</option>
                        @if (vehiculosRestriccion != null)
                            {
                            @foreach (var vehiculo in vehiculosRestriccion)
                                {
                                <option value="@vehiculo.placa">@vehiculo.placa @vehiculo.marca @vehiculo.modelo @vehiculo.licenciaRequerida</option>
                                }
                            }
                    </InputSelect>
                </div>



                <div>
                    <a style="color:red">*</a>
                    <label> Seleccione un conductor: </label>
                    <InputSelect required @bind-Value="@entrega.chofer">
                        <option value="">Seleccione una opción</option>
                        @if (conductoresRestriccion != null)
                            {
                            @foreach (var conductor in conductoresRestriccion)
                                {
                                <option value="@conductor.cedula">@conductor.cedula @conductor.nombre @conductor.apellido1 @conductor.apellido2</option>
                                }
                            }
                    </InputSelect>
                </div>

                <div>
                    <a style="color:red">*</a>
                    <label> Ingrese la fecha de salida: </label>
                    <InputDate required @bind-Value="@entrega.fechaSalida" />
                </div>

                <div>
                    <label> Comentarios de la entrega: </label>
                    <InputTextArea @bind-Value="@entrega.comentarios" />
                </div>

                <div>
                    <button type="submit" class="btn btn-success">Crear Entrega</button>
                </div>
            </EditForm>
        </div>
    }
</body>


@code {
    /// <value>Get y set de la lista de facturas.</value>
    public List<Factura> facturas { get; set; }
    /// <value>Get y set de la lista de conductores.</value>
    public List<Conductor> conductores { get; set; }
    /// <value>Get y set de la lista de vehiculos.</value>
    public List<Vehiculo> vehiculos { get; set; }
    /// <value>Get y set de la lista de vehiculos con restriccion.</value>
    public List<Vehiculo> vehiculosRestriccion { get; set; } = new List<Vehiculo>();
    /// <value>Get y set de la lista de conductores con restriccion.</value>
    public List<Conductor> conductoresRestriccion { get; set; } = new List<Conductor>();
    /// <value>Get y set de un objeto de tipo entrega.</value>
    public Entrega entrega { get; set; } = new Entrega();

    /// <summary>
    /// Funcion que carga el componente, con las facturasm conductores y vehiculos.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await cargarFacturas();
        await cargarConductores();
        await cargarVehiculos();
        await JS.InvokeAsync<object>("DataTableAdd");
    }
    /// <summary>
    /// Funcion que carga las facturas en el componente.
    /// </summary>
    async Task cargarFacturas()
    {
        facturas = await Http.GetJsonAsync<List<Factura>>("Entregas");
    }
    /// <summary>
    /// Funcion que carga los conductores en el componente.
    /// </summary>
    async Task cargarConductores()
    {
        conductores = await Http.GetJsonAsync<List<Conductor>>($"Conductor/{true:bool}");
    }
    /// <summary>
    /// Funcion que carga los vehiculos en el componente.
    /// </summary>
    async Task cargarVehiculos()
    {
        vehiculos = await Http.GetJsonAsync<List<Vehiculo>>($"Vehiculo/{true:bool}");
    }

    /// <summary>
    /// Funcion que agrega las facturas que esten por despachar a la entrega. Posteriormente, llama al metodo de cargar los vehiculos.
    /// </summary>
    /// <param name="id"></param>
    void agregarEntrega(string id)
    {
        Factura factura = facturas.Find(F => F.id == id);
        if (factura.estado == "Por Despachar")
        {
            facturas.Find(F => F.id == id).estado = "Asignado";
            entrega.peso += factura.pesoTotal;
            entrega.costo += factura.montoTotal;
        }
        else
        {
            facturas.Find(F => F.id == id).estado = "Por Despachar";
            entrega.peso -= factura.pesoTotal;
            entrega.costo -= factura.montoTotal;
        }
        seleccionarVehiculos();
    }
    /// <summary>
    /// Funcion que carga los vehiculos dependiendo del peso total de los productos de las facturas.
    /// </summary>
    void seleccionarVehiculos()
    {
        vehiculosRestriccion = new List<Vehiculo>();
        conductoresRestriccion = new List<Conductor>();
        entrega.vehiculo = null;
        if (facturas.FindAll(x=>x.estado == "Asignado").Count > 0) {
            foreach (var vehiculo in vehiculos)
            {
                if (vehiculo.capacidadCarga >= entrega.peso)
                {
                    vehiculosRestriccion.Add(vehiculo);
                }
            }
        }
    }
    /// <summary>
    /// Funcion que filtra los conductores dependiendo si son aptos para manejar X vehiculo, en base a su licencia.
    /// </summary>
    void filtrarConductores()
    {
        //if (!entrega.vehiculo.Equals(null))
        //{
        string placa = entrega.vehiculo;
        Vehiculo vehiculo = vehiculos.FirstOrDefault(x => x.placa == placa);
        if (vehiculo != null)
        {
            string licencia = vehiculo.licenciaRequerida;

            switch (licencia[0])
            {
                case 'A':
                    conductoresRestriccion = conductores.FindAll(x => x.licenciaA >= Int32.Parse(licencia[1].ToString()));
                    break;
                case 'B':
                    conductoresRestriccion = conductores.FindAll(x => x.licenciaB >= Int32.Parse(licencia[1].ToString()));
                    break;
                default:
                    conductoresRestriccion = new List<Conductor>();
                    break;
            }
        }
        //}
    }
    /// <summary>
    /// Funcion que agrega las entregas a la base de datos.
    /// </summary>
    async Task agregarEntregaBD()
    {
        if (facturas.FindAll(x => x.estado == "Asignado").Count > 0)
        {
            entrega.estado = "Entrega Pendiente";
            entrega.costoOperativo = 1;

            await Http.PostJsonAsync("Entrega", entrega);

            DateTime fechaTMP = entrega.fechaSalida;

            string fecha = fechaTMP.ToString("s");

            Console.WriteLine(fecha);

            entrega = await Http.GetJsonAsync<Entrega>($"Entrega/{fecha:Datetime}");

            foreach (var factura in facturas)
            {
                if (factura.estado == "Asignado")
                {
                    factura.entrega = entrega.id;
                    await Http.PutJsonAsync("Factura", factura);
                }
            }

            vehiculos.Find(x => x.placa == entrega.vehiculo).estado = "Realizando Entrega";

            await Http.PutJsonAsync("Vehiculo", vehiculos.Find(x => x.placa == entrega.vehiculo));

            conductores.Find(x => x.cedula == entrega.chofer).estado = "Realizando Entrega";

            await Http.PutJsonAsync("Conductor", conductores.Find(x => x.cedula == entrega.chofer));

            Navigation.NavigateTo("/Entregas");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Para Crear una entrega debe tener al menos una factura");
        }
    }
}