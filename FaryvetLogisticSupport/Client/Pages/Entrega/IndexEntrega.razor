@page "/Entregas"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Entregas</h3>
<body onbeforeunload="DataTableRemove()">

    @if (facturas == null)
    {
        <text> Cargando... </text>
    }
    else if (facturas.Count == 0)
    {
        <text> No hay facturas </text>
    }
    else
    {
        <div class="container">
            <table id="datatable" class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <td> Id </td>
                        <td> Peso Total</td>
                        <td> Forma de Cobro</td>
                        <td> Moneda </td>
                        <td> Monto Total</td>
                        <td> Nombre del Cliente </td>
                        <td> Ubicación </td>
                        <td> Dirección </td>
                        <td> Agregar a Entrega</td>
                        <td> Estado </td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var factura in facturas)
                    {
                        <tr>
                            <td> @factura.id </td>
                            <td> @factura.pesoTotal </td>
                            <td> @factura.formaCobro </td>
                            <td> @factura.moneda </td>
                            <td> @factura.montoTotal </td>
                            <td> @factura.nombreCliente </td>
                            <td> @factura.ubicacion </td>
                            <td> @factura.direccion </td>
                            <td><input type="checkbox" @onclick="(() => agregarEntrega(factura.id))" /> </td>
                            <td> @factura.estado</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="container">
            <h5>
                Peso total: @entrega.peso KG
            </h5>
        </div>

        <div class="container">
            <EditForm Model="@entrega" OnValidSubmit="@agregarEntregaBD">
                <InputSelect @onchange="@filtrarConductores" @bind-Value="@entrega.vehiculo">
                    <option value="">Seleccione una opción</option>
                    @foreach (var vehiculo in vehiculosRestriccion)
                        {
                        <option value="@vehiculo.placa">@vehiculo.placa @vehiculo.marca @vehiculo.modelo @vehiculo.licenciaRequerida</option>
                        }
                </InputSelect>

                <InputSelect @bind-Value="@entrega.chofer">
                    <option value="">Seleccione una opción</option>
                    @foreach (var conductor in conductoresRestriccion)
                        {
                        <option value="@conductor.cedula">@conductor.cedula @conductor.nombre @conductor.apellido1 @conductor.apellido2</option>
                        }
                </InputSelect>

                <InputDate @bind-Value="@entrega.fechaSalida" />

                <InputTextArea @bind-Value="@entrega.comentarios" />

                <button type="submit" class="btn btn-success">Crear Entregas</button>
            </EditForm>
        </div>
    }
</body>


@code {
    public List<Factura> facturas { get; set; }
    public List<Conductor> conductores { get; set; }
    public List<Vehiculo> vehiculos { get; set; }
    public List<Vehiculo> vehiculosRestriccion { get; set; }
    public List<Conductor> conductoresRestriccion { get; set; }
    public Entrega entrega { get; set; } = new Entrega();

    protected override async Task OnInitializedAsync()
    {
        await cargarFacturas();
        await cargarConductores();
        await cargarVehiculos();
        await JS.InvokeAsync<object>("DataTableAdd");
    }

    async Task cargarFacturas()
    {
        facturas = await Http.GetJsonAsync<List<Factura>>("Factura");
    }

    async Task cargarConductores()
    {
        conductores = await Http.GetJsonAsync<List<Conductor>>($"Conductor/{true:bool}");
    }

    async Task cargarVehiculos()
    {
        vehiculos = await Http.GetJsonAsync<List<Vehiculo>>($"Vehiculo/{true:bool}");
    }


    void agregarEntrega(string id)
    {
        Factura factura = facturas.Find(F => F.id == id);
        if (factura.estado == "Por Despachar")
        {
            facturas.Find(F => F.id == id).estado = "Asignado";
            entrega.peso += factura.pesoTotal;
            entrega.costo += factura.montoTotal;
        }
        else
        {
            facturas.Find(F => F.id == id).estado = "Por Despachar";
            entrega.peso -= factura.pesoTotal;
            entrega.costo -= factura.montoTotal;
        }

        vehiculosRestriccion = vehiculos.FindAll(V => V.capacidadCarga >= entrega.peso);
    }

    void filtrarConductores()
    {
        string placa = entrega.vehiculo;
        Vehiculo vehiculo = vehiculos.FirstOrDefault(x => x.placa == placa);
        string licencia = vehiculo.licenciaRequerida;

        switch (licencia[0])
        {
            case 'A':
                conductoresRestriccion = conductores.FindAll(x => x.licenciaA >= Int32.Parse(licencia[1].ToString()));
                break;
            case 'B':
                conductoresRestriccion = conductores.FindAll(x => x.licenciaB >= Int32.Parse(licencia[1].ToString()));
                break;
            default:
                conductoresRestriccion = new List<Conductor>();
                break;
        }
    }

    async Task agregarEntregaBD()
    {
        entrega.estado = "Entrega Pendiente";
        foreach (var factura in facturas)
        {
            if (factura.estado == "Asignado")
            {
                entrega.Facturas.Add(factura);
            }
        }

        await Http.PostJsonAsync("Entrega", entrega);

        Navigation.NavigateTo("Entregas");
    }
}
